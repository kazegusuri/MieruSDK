// -*- C++ -*-
//===----------------------- initializer_list -----------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is dual licensed under the MIT and the University of Illinois Open
// Source Licenses. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#pragma once

/*
    initializer_list synopsis

namespace std
{

template<class E>
class initializer_list
{
public:
    typedef E        value_type;
    typedef const E& reference;
    typedef const E& const_reference;
    typedef size_t   size_type;

    typedef const E* iterator;
    typedef const E* const_iterator;

    initializer_list() noexcept;

    size_t   size()  const noexcept;
    const E* begin() const noexcept;
    const E* end()   const noexcept;
};

template<class E> const E* begin(initializer_list<E> il) noexcept;
template<class E> const E* end(initializer_list<E> il) noexcept;

}  // std

*/

#if !defined(__CXX_INITIALIZER_LIST) && !defined(_LIBCPP_INITIALIZER_LIST)
namespace std {
    template<class _E>
    class initializer_list {
        const _E* __begin_;
        size_t    __size_;

        initializer_list(const _E* __b, size_t __s)
            : __begin_(__b),
              __size_(__s) {}
    public:
        typedef _E        value_type;
        typedef const _E& reference;
        typedef const _E& const_reference;
        typedef size_t    size_type;

        typedef const _E* iterator;
        typedef const _E* const_iterator;
        
        size_t    size()  const {return __size_;}
        const _E* begin() const {return __begin_;}
        const _E* end()   const {return __begin_ + __size_;}
    };

    template<class _E>
    inline const _E* begin(initializer_list<_E> __il) {
        return __il.begin();
    }

    template<class _E>
    inline const _E* end(initializer_list<_E> __il) {
        return __il.end();
    }
}

#endif
